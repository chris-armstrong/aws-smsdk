{0 aws-smsdk-clients}

[aws-smsdk-clients] generates Amazon Web Services (AWS) service SDKs for OCaml from {{: https://smithy.io/2.0/index.html }Smithy} definitions.

The underlying SDKs use {{:https://github.com/ocaml-multicore/eio} EIO} for its concurrency model, taking advantage of the OCaml 5.0 Effects support, that enables a cleaner and simpler concurrency syntax without monadic support (like {{: https://github.com/ocsigen/lwt} lwt}).

{1 Status}

This project is very much a work in progress. The current focus is on generating correct and useful SDKs for core AWS services like STS, SQS, S3, DynamoDB, etc. rather than support for every AWS service.

{1 Installation}

Use {{:https://opam.ocaml.org/doc/Usage.html} opam} to install {i aws-smsdk-clients}:

{@sh[
  opam install aws-smsdk-clients
]}

{1 Library Organisation}

[aws-smsdk-clients] exposes all of the service SDKs. It works with [aws-smsdk-lib] for authentication and protocol implementations.

{b Service SDKs} are organised under its own module with the naming convention [Aws_SmSdk_Clients.*] e.g. [Aws_SmSdk_Clients.DynamoDB]. 

{b Types} for all operations and their components are found directly under the service module.

{b Builder functions}, in the form of `make_<type_name>`, aso exist directly in the service module. They're particularly helpful with larger types that have a lot of optional fields.

{b Service Operations} exist in a submodule of a Service SDK e.g. {{:https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html}SQS} {{:https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ListQueues.html}ListQueues} is in the {!module:Aws_SmSdk_Clients.SQS.ListQueues} module. (You can find all the operations available for a particular service on the Actions page of the corresponding API Reference section of the {{:https://docs.aws.amazon.com/}AWS documentation} for that service).


{1 Usage}

Calling a service operation consists of:

* Creating a configuration object with your authorisation and region details
* Initialising a context from your eio switch
* Constructing a request object
* Invoking the service operation function

{2 Limitations}

This SDK is currently under development, so a number of features of AWS SDKs in other languages are not supported yet that make this unsuitable for production usage at this time.

- {b Service Documentation}: there is inline documentation for types and service operations available but this is not included in the generated code
- {b Authentication}: only environment variables or the [~/.aws/credentials] file (non-SSO). Instance/Container metadata secret retrieval and SSO is not currently supported.
- {b Middleware}: no middleware support (e.g. tracers, loggers)
- {b Helpers}: additional SDK helpers, such as DynamoDB DocumentClient, are not available

{2 Configuration Objects}

A {i configuration} object is used by the context todetermine authorization and other environment settings (such as the region to use).

{@ocaml[
open Aws_SmSdk_Lib

(* Initialise with defaults from environment *)
let config = Config.defaultConfig ()

(* Customise the config object *)
let config = Config.make
  ~resolveRegion: (fun () -> "us-west-1")
  ~resolveAuth: (Auth.fromProfile env)
  ()
]}

{2 Context Initialisation}

Calling a service operation first requires you to create a context object. The context ties together a {{!configuration}configuration} and an {{:https://github.com/ocaml-multicore/eio?tab=readme-ov-file#switches} eio switch} for calling service operations. 

{i NOTE: it isn't possible to use this library with other effect-based concurrency frameworks like miou or riot, or older concurrency frameorks like lwt or async, without an eio compatibility shim (these are untested).}

The HTTP client bound to the context creates a shared connection pool for each service endpoint. That connection pool is bound to the lifetime of the switch.

You can share the context object between services or create separate ones (as required).

{@ocaml[
open Aws_SmSdk_Lib

let _ 
  Eio_main.run (fun env ->
    Eio.Switch.run (fun sw ->
      let config = Config.defaultConfig () in
      let ctx = Context.make ~config ~sw in
      ...
]}

{i The above example is typical of a command line utility, where you initialise the switch as part of your main programme. Long running servers or frameworks may already provide you with an eio switch.}

{2 Opening and using service modules}

Service modules each have their own module under {!module Aws_SmSdk_Clients}. We recommend using local opens because each service module contains numerous types, associated builder functions and operations, which may clutter your namespace.

{@ocaml[
let read_table_entries =
  let open Aws_SmSdk_Clients.DynamoDB in
  ...
]}

An operation request is constructed with the corresponding [make_<operation>_<name>] convenience function, or you can also use the generated [<operation_name>_input] type directly).

{@ocaml[
let read_table_entries context =
  let open Aws_SmSdk_Clients.DynamoDB in
  let request = make_list_tables_request ~table_name:"orders" () in
  ...
]}

You can then invoke an operation using its submodule's [request] function:

{@ocaml[
  let result = ListTables.request context request
]}

These return a result type. We recommend binding the [let+] operator to [Result.bind] so you can cascade these (see the [awssdklib_examples/] directory for more details).

{2 Error Handling}



{!modules: Aws_SmSdk_Clients.SQS Aws_SmSdk_Clients.DynamoDB Aws_SmSdk_Clients.Kendra}
